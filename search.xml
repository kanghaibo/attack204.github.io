<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>博弈论入门之nim游戏</title>
      <link href="/2018/02/22/%E5%8D%9A%E5%BC%88%E8%AE%BA%E5%85%A5%E9%97%A8%E4%B9%8Bnim%E6%B8%B8%E6%88%8F/"/>
      <content type="html"><![CDATA[<excerpt in="" index=""><h2 id="nim游戏"><a href="#nim游戏" class="headerlink" title="nim游戏"></a>nim游戏</h2><blockquote><p>nim游戏</p><p>有两个顶尖聪明的人在玩游戏，游戏规则是这样的：</p><p>有$n$堆石子，两个人可以从任意一堆石子中拿任意多个石子(不能不拿)，没法拿的人失败。问谁会胜利</p></blockquote><a id="more"></a><the rest="" of="" contents=""><p>nim游戏是巴什博奕的升级版(不懂巴什博奕的可以看<a href="http://attack204.com/2018/02/22/%E5%8D%9A%E5%BC%88%E8%AE%BA%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B7%B4%E4%BB%80%E5%8D%9A%E5%A5%95/">这里</a>)</p><p>它不再是简单的一个状态，因此分析起来也棘手许多</p><p>如果说巴什博奕仅仅博弈论的一个引子的话，</p><p>nim游戏就差不多算是真正的入门了</p><h2 id="博弈分析"><a href="#博弈分析" class="headerlink" title="博弈分析"></a>博弈分析</h2><p>面对新的博弈问题，我们按照套路，从简单的情况入手</p><p>当只有一堆石子的时候，先手可以全部拿走。先手必胜</p><p>当有两堆石子且石子个数相同的时候，先手不论拿多少，后手都可以从另一堆中拿同样多的石子，先手必败，否则先手必胜</p><p>当有三堆的时候呢？</p><p>当有$n$堆的时候呢？</p><p>这样玩下去却是很繁琐，不过前辈们总结出了一条非常厉害的规律！</p><h2 id="定理解析"><a href="#定理解析" class="headerlink" title="定理解析"></a>定理解析</h2><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>对于nim游戏，前辈们发现了一条重要的规律！</p><p>当$n$堆石子的数量异或和等于$0$时，先手必胜，否则先手必败</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>设$\oplus$表示<a href="https://baike.baidu.com/item/%E5%BC%82%E6%88%96/10993677?fr=aladdin" target="_blank" rel="external">异或运算</a></p><p>nim游戏的必败态我们是知道的，就是当前$n$堆石子的数量都为零</p><p>设$a[i]$表示第$i$堆石子的数量，那么当前局面就是</p><p>$0 \oplus 0 \oplus 0 \oplus \dots \oplus 0 = 0 $</p><ul><li>对于先手来说，如果当前局面是</li></ul><p>$a_1 \oplus a_2 \oplus a_3 \oplus \dots \oplus a_n = k$</p><p>那么一定存在某个$a_i$，它的二进制表示在$k$最高位上一定是$1$</p><p>我们将$a_i \oplus k$，这样就变成了</p><p>$a_1 \oplus a_2 \oplus a_3 \oplus \dots \oplus a_n \oplus k = 0$</p><p>此时先手必胜</p><ul><li>对于先手来说，如果当前局面是</li></ul><p>$a_1 \oplus a_2 \oplus a_3 \oplus \dots \oplus a_n = k$</p><p>那么我们不可能将某一个$a_i$异或一个数字后使得</p><p>$a_1 \oplus a_2 \oplus a_3 \oplus \dots \oplus a_n = 0$</p><p>此时先手必败</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> a[<span class="number">10001</span>]; </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> Test;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;Test);</div><div class="line">    <span class="keyword">while</span>(Test--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>,N;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;N);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) ans=ans^a[i];</div><div class="line">        ans==<span class="number">0</span>?<span class="built_in">printf</span>(<span class="string">"No\n"</span>):<span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>临时还没有做太多题目，以后做多了慢慢补吧</p><ul><li><a href="https://www.luogu.org/problemnew/show/P2197" target="_blank" rel="external">洛谷P2197</a></li></ul><p><a href="http://www.cnblogs.com/zwfymqz/p/8458994.html" target="_blank" rel="external">题解</a></p><ul><li><a href="http://poj.org/problem?id=1704" target="_blank" rel="external">POJ 1704</a></li></ul><p>估计没几个人能一眼秒吧233</p><p><a href="http://www.cnblogs.com/zwfymqz/p/8459698.html" target="_blank" rel="external">题解</a></p></the></excerpt>]]></content>
      
      <categories>
          
          <category> oi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oi </tag>
            
            <tag> 博弈论 </tag>
            
            <tag> nim游戏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>博弈论入门之巴什博奕</title>
      <link href="/2018/02/22/%E5%8D%9A%E5%BC%88%E8%AE%BA%E5%85%A5%E9%97%A8%E4%B9%8B%E5%B7%B4%E4%BB%80%E5%8D%9A%E5%A5%95/"/>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><h2 id="巴什博奕"><a href="#巴什博奕" class="headerlink" title="巴什博奕"></a>巴什博奕</h2><blockquote><p>巴什博奕：</p><p>两个顶尖聪明的人在玩游戏，有$n$个石子，每人可以随便拿$1-m$个石子，不能拿的人为败者，问谁会胜利</p></blockquote><p>巴什博奕是博弈论问题中基础的问题</p><p>它是最简单的一种情形对应一种状态的博弈<br><a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><h2 id="博弈分析"><a href="#博弈分析" class="headerlink" title="博弈分析"></a>博弈分析</h2><p>我们从最简单的情景开始分析</p><p>当石子有$1-m$个时，毫无疑问，先手必胜</p><p>当石子有$m+1$个时，先手无论拿几个，后手都可以拿干净，先手必败</p><p>当石子有$m+2-2m$时，先手可以拿走几个，剩下$m+1$个，先手必胜</p><p>我们不难发现，面临$m+1$个石子的人一定失败。</p><p>这样的话两个人的最优策略一定是通过拿走石子，使得对方拿石子时还有$m+1$个</p><p>我们考虑往一般情况推广</p><ul><li>设当前的石子数为$n=k*(m+1)+r$</li></ul><p>先手会首先拿走$r$个，接下来假设后手拿走$x$个，先手会拿走$m+1-k$个，这样博弈下去后手最终一定失败</p><ul><li>设当前的石子数为$n=k*(m+1)$</li></ul><p>假设先手拿$x$个，后手一定会拿$m+1-x$个，这样下去先手一定失败</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">int</span> n,m;</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</div><div class="line"><span class="keyword">if</span>(n % (m+<span class="number">1</span>) !=<span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"first win"</span>);</div><div class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"second win"</span>);</div><div class="line">    <span class="keyword">return</span>  <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ul><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=1846" target="_blank" rel="external">HDU1846</a></li></ul><p><a href="http://www.cnblogs.com/zwfymqz/p/8244287.html" target="_blank" rel="external">题解</a></p><ul><li><a href="http://acm.hdu.edu.cn/showproblem.php?pid=4764" target="_blank" rel="external">HDU4764</a></li></ul><p><a href="http://www.cnblogs.com/zwfymqz/p/8458896.html" target="_blank" rel="external">题解</a></p><ul><li><a href="http://www.cnblogs.com/zwfymqz/p/8458822.html" target="_blank" rel="external">HDU1847</a></li></ul><p><a href="http://www.cnblogs.com/zwfymqz/p/8458822.html" target="_blank" rel="external">题解</a></p></the>]]></content>
      
      <categories>
          
          <category> oi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oi </tag>
            
            <tag> 博弈论 </tag>
            
            <tag> 巴什博奕 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树链剖分</title>
      <link href="/2018/02/22/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""> </excerpt></p><ul><li>树链剖分是什么？</li></ul><p>树链剖分，说白了就是一种让你代码不得不强行增加1k的数据结构-dms</p><ul><li>有什么用？</li></ul><p><del>证明出题人非常毒瘤</del></p><p>可以非常友(bao)好(li)的解决一些树上问题</p><a id="more"></a><the rest="" of="" contents="" |="" 余下全文=""><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><p>树链剖分的思想比较神奇<br>它的思想是：<strong>把一棵树拆成若干个不相交的链，然后用一些数据结构去维护这些链</strong></p><p>那么问题来了</p><ul><li>如何把树拆成链？</li></ul><p>首先明确一些定义</p><ol><li><strong>重儿子</strong>：该节点的子树中,节点个数最多的子树的根节点(也就是和该节点相连的点)，即为该节点的重儿子</li><li><strong>重边</strong>：连接该节点与它的重儿子的边</li><li><strong>重链</strong>：由一系列重边相连得到的链</li><li><strong>轻链</strong>：由一系列非重边相连得到的链</li></ol><p>这样就不难得到拆树的方法</p><p><strong>对于每一个节点，找出它的重儿子，那么这棵树就自然而然的被拆成了许多重链与许多轻链</strong></p><ul><li>如何对这些链进行维护？</li></ul><p>首先，要对这些链进行维护，就要确保每个链上的节点都是连续的，</p><p>因此我们需要对整棵树进行重新编号，然后利用dfs序的思想，用线段树或树状数组等进行维护（具体用什么需要看题目要求，因为线段树的功能比树状数组强大，所以在这里我就不提供树状数组的写法了）</p><p>注意在进行重新编号的时候先访问重链</p><p>这样可以保证重链内的节点编号连续</p><p>上面说的太抽象了，结合一张图来理解一下</p><p><img src="http://ou46et6i2.bkt.clouddn.com/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%861.png" alt=""></p><p>对于一棵最基本的树</p><p>给他标记重儿子，</p><p><img src="http://ou46et6i2.bkt.clouddn.com/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%862.png" alt=""></p><p>蓝色为重儿子，红色为重边</p><p>然后对树进行重新编号</p><p><img src="http://ou46et6i2.bkt.clouddn.com/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%863.png" alt=""></p><p>橙色表示的是该节点重新编号后的序号</p><p>不难看出重链内的节点编号是连续的</p><p>然后就可以在线段树上搞事情啦</p><p>像什么区间加区间求和什么的</p><p>另外有一个性质：以$i$为根的子树的树在线段树上的编号为$[i,i+子树节点数-1]$</p><p>接下来结合一道例题，加深一下对于代码的理解</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>首先来一坨定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> deep[MAXN];<span class="comment">//节点的深度 </span></div><div class="line"><span class="keyword">int</span> fa[MAXN];<span class="comment">//节点的父亲 </span></div><div class="line"><span class="keyword">int</span> son[MAXN];<span class="comment">//节点的重儿子 </span></div><div class="line"><span class="keyword">int</span> tot[MAXN];<span class="comment">//节点子树的大小</span></div></pre></td></tr></table></figure><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>按照我们上面说的，我们首先要对整棵树dfs一遍，找出每个节点的重儿子</p><p>顺便处理出每个节点的深度，以及他们的父亲节点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> f,<span class="keyword">int</span> dep)</span></span></div><div class="line">&#123;</div><div class="line">    deep[now]=dep;</div><div class="line">    fa[now]=f;</div><div class="line">    tot[now]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> maxson=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];i!=<span class="number">-1</span>;i=edge[i].nxt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(edge[i].v==f) <span class="keyword">continue</span>;</div><div class="line">        tot[now]+=dfs1(edge[i].v,now,dep+<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(tot[edge[i].v]&gt;maxson) maxson=tot[edge[i].v],son[now]=edge[i].v;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tot[now];</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p>然后我们需要对整棵树进行重新编号</p><p>我把一开始的每个节点的权值存在了$b$数组内</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> topf)</span></span></div><div class="line">&#123;</div><div class="line">    idx[now]=++cnt;</div><div class="line">    a[cnt]=b[now];</div><div class="line">    top[now]=topf;</div><div class="line">    <span class="keyword">if</span>(!son[now]) <span class="keyword">return</span> ;</div><div class="line">    dfs2(son[now],topf);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];i!=<span class="number">-1</span>;i=edge[i].nxt)</div><div class="line">        <span class="keyword">if</span>(!idx[edge[i].v])</div><div class="line">            dfs2(edge[i].v,edge[i].v);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>$idx$表示重新编号后该节点的编号是多少</p><p>另外，这里引入了一个$top$数组，<br>$top[i]$表示$i$号节点所在重链的头节点(最顶上的节点)<br>至于这个数组有啥用，后面再说</p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p>我们需要根据重新编完号的树，把这棵树的上每个点映射到线段树上，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Tree</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> l,r,w,siz,f;</div><div class="line">&#125;T[MAXN];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr)</span></span></div><div class="line">&#123;</div><div class="line">    T[k].l=ll;T[k].r=rr;T[k].siz=rr-ll+<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(ll==rr)</div><div class="line">    &#123;</div><div class="line">        T[k].w=a[ll];</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid=(ll+rr)&gt;&gt;<span class="number">1</span>;</div><div class="line">    Build(ls,ll,mid);</div><div class="line">    Build(rs,mid+<span class="number">1</span>,rr);</div><div class="line">    update(k);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>另外线段树的基本操作，<br>这里就不详细解释了</p><p>直接放代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span><span class="comment">//更新</span></span></div><div class="line">&#123;</div><div class="line">    T[k].w=(T[ls].w+T[rs].w+MOD)%MOD;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">IntervalAdd</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> val)</span><span class="comment">//区间加</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(ll&lt;=T[k].l&amp;&amp;T[k].r&lt;=rr)</div><div class="line">    &#123;</div><div class="line">        T[k].w+=T[k].siz*val;</div><div class="line">        T[k].f+=val;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    pushdown(k);</div><div class="line">    <span class="keyword">int</span> mid=(T[k].l+T[k].r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(ll&lt;=mid)    IntervalAdd(ls,ll,rr,val);</div><div class="line">    <span class="keyword">if</span>(rr&gt;mid)    IntervalAdd(rs,ll,rr,val);</div><div class="line">    update(k);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">IntervalSum</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr)</span><span class="comment">//区间求和</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(ll&lt;=T[k].l&amp;&amp;T[k].r&lt;=rr)</div><div class="line">        <span class="keyword">return</span> T[k].w;</div><div class="line">    pushdown(k);</div><div class="line">    <span class="keyword">int</span> mid=(T[k].l+T[k].r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(ll&lt;=mid) ans=(ans+IntervalSum(ls,ll,rr))%MOD;</div><div class="line">    <span class="keyword">if</span>(rr&gt;mid)  ans=(ans+IntervalSum(rs,ll,rr))%MOD;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span><span class="comment">//下传标记</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!T[k].f) <span class="keyword">return</span> ;</div><div class="line">    T[ls].w=(T[ls].w+T[ls].siz*T[k].f)%MOD;</div><div class="line">    T[rs].w=(T[rs].w+T[rs].siz*T[k].f)%MOD;</div><div class="line">    T[ls].f=(T[ls].f+T[k].f)%MOD;</div><div class="line">    T[rs].f=(T[rs].f+T[k].f)%MOD;</div><div class="line">    T[k].f=<span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h3><p>我们考虑如何实现对于树上的操作</p><p>树链剖分的思想是:对于两个不在同一重链内的节点,让他们不断地跳,使得他们处于同一重链上</p><p>那么如何”跳”呢？</p><p>还记得我们在第二次$dfs$中记录的$top$数组么？</p><p>有一个显然的结论：$x$到$top[x]$中的节点在线段树上是连续的，</p><p>结合$deep$数组</p><p>假设两个节点为$x$,$y$</p><p>我们每次让$deep[top[x]]$与$deep[top[y]]$中大的(在下面的)往上跳(有点类似于树上倍增)</p><p>让x节点直接跳到$top[x]$,然后在线段树上更新</p><p>最后两个节点一定是处于同一条重链的，前面我们提到过重链上的节点都是连续的，直接在<br>线段树上进行一次查询就好</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeSum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span><span class="comment">//x与y路径上的和</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(top[x]!=top[y])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) swap(x,y);</div><div class="line">        ans=(ans+IntervalSum(<span class="number">1</span>,idx[ top[x] ],idx[x]))%MOD;</div><div class="line">        x=fa[ top[x] ];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y]) swap(x,y);</div><div class="line">    ans=(ans+IntervalSum(<span class="number">1</span>,idx[x],idx[y]))%MOD;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeAdd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span><span class="comment">//对于x,y路径上的点加val的权值</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(top[x]!=top[y])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) swap(x,y);</div><div class="line">        IntervalAdd(<span class="number">1</span>,idx[ top[x] ],idx[x],val);</div><div class="line">        x=fa[ top[x] ];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y])    swap(x,y);</div><div class="line">    IntervalAdd(<span class="number">1</span>,idx[x],idx[y],val);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在树上查询的这一步可能有些抽象，我们结合一个例子来理解一下</p><p><img src="http://ou46et6i2.bkt.clouddn.com/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%864.png" alt=""></p><p>还是上面那张图，假设我们要查询$3.6$这两个节点的之间的点权合，为了方便理解我们假设每个点的点权都是$1$</p><p>刚开始时</p><p>$top[3]=2,top[6]=1$</p><p>$deep[top[3]]=2,deep[top[6]]=1$</p><p>我们会让$3$向上跳,跳到$top[3]$的爸爸,也就是$1$号节点</p><p><img src="http://ou46et6i2.bkt.clouddn.com/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%865.png" alt=""></p><p>这时$1$号节点和$6$号节点已经在同一条重链内,所以直接对线段树进行一次查询即可</p><h3 id="对于子树的操作"><a href="#对于子树的操作" class="headerlink" title="对于子树的操作"></a>对于子树的操作</h3><p>这个就更简单了</p><p>因为一棵树的子树在线段树上是连续的</p><p>所以修改的时候直接这样</p><p>IntervalAdd(1,idx[x],idx[x]+tot[x]-1,z%MOD);</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h3 id="性质1"><a href="#性质1" class="headerlink" title="性质1"></a>性质1</h3><p>如果边$\left( u,v\right)$,为轻边,那么$Size\left( v\right) \leq Size\left( u\right) /2$。</p><p>证明：显然，否则该边会成为重边</p><h3 id="性质2"><a href="#性质2" class="headerlink" title="性质2"></a>性质2</h3><p>树中任意两个节点之间的路径中轻边的条数不会超过$\log _{2}n$,重路径的数目不会超过$\log _{2}n$</p><p>证明：不会</p><p>有了上面两条性质，我们就可以来分析时间复杂度了</p><p>由于重路径的数量的上界为$\log _{2}n$，</p><p>线段树中查询/修改的复杂度为$\log _{2}n$</p><p>那么总的复杂度就是$\left( \log _{2}n\right) ^{2}$</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">2</span>*<span class="number">1e6</span>+<span class="number">10</span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ls k&lt;&lt;1</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> rs k&lt;&lt;1|1</span></div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[MAXN],*p1=buf,*p2=buf;</div><div class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,MAXN,<span class="built_in">stdin</span>),p1==p2)?EOF:*p1++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> c=nc();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=nc();&#125;</div><div class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>,c=nc();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> u,v,nxt;</div><div class="line">&#125;edge[MAXN];</div><div class="line"><span class="keyword">int</span> head[MAXN];</div><div class="line"><span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line"><span class="keyword">struct</span> Tree</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> l,r,w,siz,f;</div><div class="line">&#125;T[MAXN];</div><div class="line"><span class="keyword">int</span> N,M,root,MOD,cnt=<span class="number">0</span>,a[MAXN],b[MAXN];</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    edge[num].u=x;</div><div class="line">    edge[num].v=y;</div><div class="line">    edge[num].nxt=head[x];</div><div class="line">    head[x]=num++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> deep[MAXN],fa[MAXN],son[MAXN],tot[MAXN],top[MAXN],idx[MAXN];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> f,<span class="keyword">int</span> dep)</span></span></div><div class="line">&#123;</div><div class="line">    deep[now]=dep;</div><div class="line">    fa[now]=f;</div><div class="line">    tot[now]=<span class="number">1</span>;</div><div class="line">    <span class="keyword">int</span> maxson=<span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];i!=<span class="number">-1</span>;i=edge[i].nxt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(edge[i].v==f) <span class="keyword">continue</span>;</div><div class="line">        tot[now]+=dfs1(edge[i].v,now,dep+<span class="number">1</span>);</div><div class="line">        <span class="keyword">if</span>(tot[edge[i].v]&gt;maxson) maxson=tot[edge[i].v],son[now]=edge[i].v;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> tot[now];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line">    T[k].w=(T[ls].w+T[rs].w+MOD)%MOD;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr)</span></span></div><div class="line">&#123;</div><div class="line">    T[k].l=ll;T[k].r=rr;T[k].siz=rr-ll+<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(ll==rr)</div><div class="line">    &#123;</div><div class="line">        T[k].w=a[ll];</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> mid=(ll+rr)&gt;&gt;<span class="number">1</span>;</div><div class="line">    Build(ls,ll,mid);</div><div class="line">    Build(rs,mid+<span class="number">1</span>,rr);</div><div class="line">    update(k);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> topf)</span></span></div><div class="line">&#123;</div><div class="line">    idx[now]=++cnt;</div><div class="line">    a[cnt]=b[now];</div><div class="line">    top[now]=topf;</div><div class="line">    <span class="keyword">if</span>(!son[now]) <span class="keyword">return</span> ;</div><div class="line">    dfs2(son[now],topf);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];i!=<span class="number">-1</span>;i=edge[i].nxt)</div><div class="line">        <span class="keyword">if</span>(!idx[edge[i].v])</div><div class="line">            dfs2(edge[i].v,edge[i].v);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> k)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(!T[k].f) <span class="keyword">return</span> ;</div><div class="line">    T[ls].w=(T[ls].w+T[ls].siz*T[k].f)%MOD;</div><div class="line">    T[rs].w=(T[rs].w+T[rs].siz*T[k].f)%MOD;</div><div class="line">    T[ls].f=(T[ls].f+T[k].f)%MOD;</div><div class="line">    T[rs].f=(T[rs].f+T[k].f)%MOD;</div><div class="line">    T[k].f=<span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">IntervalAdd</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr,<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(ll&lt;=T[k].l&amp;&amp;T[k].r&lt;=rr)</div><div class="line">    &#123;</div><div class="line">        T[k].w+=T[k].siz*val;</div><div class="line">        T[k].f+=val;</div><div class="line">        <span class="keyword">return</span> ;</div><div class="line">    &#125;</div><div class="line">    pushdown(k);</div><div class="line">    <span class="keyword">int</span> mid=(T[k].l+T[k].r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(ll&lt;=mid)    IntervalAdd(ls,ll,rr,val);</div><div class="line">    <span class="keyword">if</span>(rr&gt;mid)    IntervalAdd(rs,ll,rr,val);</div><div class="line">    update(k);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeAdd</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">while</span>(top[x]!=top[y])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) swap(x,y);</div><div class="line">        IntervalAdd(<span class="number">1</span>,idx[ top[x] ],idx[x],val);</div><div class="line">        x=fa[ top[x] ];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y])    swap(x,y);</div><div class="line">    IntervalAdd(<span class="number">1</span>,idx[x],idx[y],val);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">IntervalSum</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> ll,<span class="keyword">int</span> rr)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span>(ll&lt;=T[k].l&amp;&amp;T[k].r&lt;=rr)</div><div class="line">        <span class="keyword">return</span> T[k].w;</div><div class="line">    pushdown(k);</div><div class="line">    <span class="keyword">int</span> mid=(T[k].l+T[k].r)&gt;&gt;<span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span>(ll&lt;=mid) ans=(ans+IntervalSum(ls,ll,rr))%MOD;</div><div class="line">    <span class="keyword">if</span>(rr&gt;mid)  ans=(ans+IntervalSum(rs,ll,rr))%MOD;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">TreeSum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">while</span>(top[x]!=top[y])</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(deep[top[x]]&lt;deep[top[y]]) swap(x,y);</div><div class="line">        ans=(ans+IntervalSum(<span class="number">1</span>,idx[ top[x] ],idx[x]))%MOD;</div><div class="line">        x=fa[ top[x] ];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(deep[x]&gt;deep[y]) swap(x,y);</div><div class="line">    ans=(ans+IntervalSum(<span class="number">1</span>,idx[x],idx[y]))%MOD;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">    freopen(<span class="string">"a.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    N=read();M=read();root=read();MOD=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) b[i]=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N<span class="number">-1</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> x=read(),y=read();</div><div class="line">        AddEdge(x,y);AddEdge(y,x);</div><div class="line">    &#125;</div><div class="line">    dfs1(root,<span class="number">0</span>,<span class="number">1</span>);</div><div class="line">    dfs2(root,root);</div><div class="line">    Build(<span class="number">1</span>,<span class="number">1</span>,N);</div><div class="line">    <span class="keyword">while</span>(M--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> opt=read(),x,y,z;</div><div class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)</div><div class="line">        &#123;    </div><div class="line">            x=read();y=read();z=read();z=z%MOD;</div><div class="line">            TreeAdd(x,y,z);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>)</div><div class="line">        &#123;</div><div class="line">            x=read();y=read();</div><div class="line">            TreeSum(x,y);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>)</div><div class="line">        &#123;</div><div class="line">            x=read(),z=read();</div><div class="line">            IntervalAdd(<span class="number">1</span>,idx[x],idx[x]+tot[x]<span class="number">-1</span>,z%MOD);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>)</div><div class="line">        &#123;</div><div class="line">            x=read();</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,IntervalSum(<span class="number">1</span>,idx[x],idx[x]+tot[x]<span class="number">-1</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></the>]]></content>
      
      <categories>
          
          <category> oi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oi </tag>
            
            <tag> 树链剖分 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>次小生成树</title>
      <link href="/2018/02/21/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>我们已经熟知了求最小生成树的方法，用kruskal,prim算法都可以搞<br>那么我们如何求次小生成树呢？<br>这里次小生成树的定义是</excerpt></p><blockquote><p>边权和严格大于最小生成树的边权和最小的生成树</p></blockquote><a id="more"></a><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h1 id="次小生成树"><a href="#次小生成树" class="headerlink" title="次小生成树"></a>次小生成树</h1><h2 id="次小生成树-1"><a href="#次小生成树-1" class="headerlink" title="次小生成树"></a>次小生成树</h2><p>我们已经熟知了求最小生成树的方法，用kruskal,prim算法都可以搞<br>那么我们如何求次小生成树呢？<br>这里次小生成树的定义是</p><blockquote><p>边权和严格大于最小生成树的边权和最小的生成树</p></blockquote><h2 id="求解方法"><a href="#求解方法" class="headerlink" title="求解方法"></a>求解方法</h2><p>次小生成树嘛，肯定和最小生成树脱不了关系<br>那么我们首先求出最小生成树</p><p>接下来，一个比较显然的思路是<br>枚举每一条未加入最小生成树的边，加入最小生成树，同时在最小生成树中删除边权最大的边<br>如果你想到了这里并写出了代码，那么恭喜你<br>你在里成功还有一步之遥成功掉进坑里了<br>比如下面的例子<br><img src="http://ou46et6i2.bkt.clouddn.com/%E6%AC%A1%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91.png" alt=""><br>蓝边表示最小生成树中的边，黄边表示新加入的边<br>在这种情况下，如果仅仅记录最大值的话，得到的答案一定是错的<br>所以我们还要记录严格小于最大值的最大值<br>当产生冲突的时候我们需要删除严格小于最大值的最大值</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>但是这样效率太低了，每一次查询都是$O(n)$的<br>有没有更好的方法呢？</p><p>不要忘了，最小生成树它是一棵树呀<br>树的链上最大最小值操作，你想到了什么？</p><p>没错！树上倍增</p><p>我们在倍增的过程中记录下最大值和严格小于最大值的最大值</p><p>这样每次查询的复杂度就变成$log(n)$啦</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>整个算法的流程大概是</p><ol><li>求出最小生成树</li><li>构造出倍增数组</li><li>每次树上倍增查询</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>用kruskal是$O(m\log m+Q\log (n))$<br>用prim是$O(n\log n+Q\log (n))$<br>Q为询问次数</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>放一道<a href="https://www.luogu.org/problemnew/show/P4180" target="_blank" rel="external">裸题</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// luogu-judger-enable-o2</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long </span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">400001</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">1e15</span>+<span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> Edge</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> u,v,w;</div><div class="line">&#125;E[MAXN];</div><div class="line"><span class="keyword">int</span> Enum=<span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></div><div class="line">&#123;</div><div class="line">    E[Enum].u=x;</div><div class="line">    E[Enum].v=y;</div><div class="line">    E[Enum].w=z;Enum++;</div><div class="line">&#125;</div><div class="line"><span class="keyword">struct</span> node</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> u,v,w,nxt;</div><div class="line">&#125;edge[MAXN];</div><div class="line"><span class="keyword">int</span> head[MAXN];</div><div class="line"><span class="keyword">int</span> num=<span class="number">1</span>;</div><div class="line"><span class="keyword">int</span> N,M;</div><div class="line"><span class="keyword">int</span> fa[MAXN],vis[MAXN],sum;</div><div class="line"><span class="keyword">int</span> deep[MAXN],f[MAXN][<span class="number">21</span>],maxx[MAXN][<span class="number">21</span>],minx[MAXN][<span class="number">21</span>];</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> z)</span></span></div><div class="line">&#123;</div><div class="line">    edge[num].u=x;</div><div class="line">    edge[num].v=y;</div><div class="line">    edge[num].w=z;</div><div class="line">    edge[num].nxt=head[x];</div><div class="line">    head[x]=num++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(fa[x]==x) <span class="keyword">return</span> fa[x];</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> fa[x]=find(fa[x]);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">unionn</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> fx=find(x),fy=find(y);</div><div class="line">    fa[fx]=fy;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">comp</span><span class="params">(<span class="keyword">const</span> Edge &amp;a,<span class="keyword">const</span> Edge &amp;b)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> a.w&lt;b.w;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Kruskal</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    sort(E+<span class="number">1</span>,E+Enum,comp);</div><div class="line">    <span class="keyword">int</span> tot=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Enum<span class="number">-1</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> x=E[i].u,y=E[i].v;</div><div class="line">        <span class="keyword">if</span>(find(x)!=find(y)) </div><div class="line">        &#123;</div><div class="line">            unionn(x,y),tot++,sum+=E[i].w,vis[i]=<span class="number">1</span>;</div><div class="line">            AddEdge(x,y,E[i].w);AddEdge(y,x,E[i].w);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(tot==N<span class="number">-1</span>) <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> now,<span class="keyword">int</span> fa)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now];i!=<span class="number">-1</span>;i=edge[i].nxt)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(edge[i].v==fa) <span class="keyword">continue</span>;</div><div class="line">        deep[edge[i].v]=deep[edge[i].u]+<span class="number">1</span>;</div><div class="line">        f[edge[i].v][<span class="number">0</span>]=now;</div><div class="line">        maxx[edge[i].v][<span class="number">0</span>]=edge[i].w;</div><div class="line">        dfs(edge[i].v,now);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">pre</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">18</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;j++)</div><div class="line">        &#123;</div><div class="line">            f[j][i]=f[ f[j][i<span class="number">-1</span>] ][i<span class="number">-1</span>];</div><div class="line">            maxx[j][i]=max(maxx[j][i<span class="number">-1</span>],maxx[ f[j][i<span class="number">-1</span>] ][i<span class="number">-1</span>]);</div><div class="line">            minx[j][i]=max(minx[j][i<span class="number">-1</span>],minx[ f[j][i<span class="number">-1</span>] ][i<span class="number">-1</span>]);</div><div class="line">            <span class="keyword">if</span>(maxx[j][i<span class="number">-1</span>]&gt;maxx[ f[j][i<span class="number">-1</span>] ][i<span class="number">-1</span>]) minx[j][i]=max(minx[j][i],maxx[ f[j][i<span class="number">-1</span>] ][i<span class="number">-1</span>]);</div><div class="line">            <span class="keyword">else</span> minx[j][i]=max(minx[j][i],maxx[j][i<span class="number">-1</span>]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">LCA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(deep[x]&lt;deep[y]) swap(x,y);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        <span class="keyword">if</span>(deep[ f[x][i] ] &gt;= deep[y] ) </div><div class="line">            x=f[x][i];</div><div class="line">    <span class="keyword">if</span>(x==y) <span class="keyword">return</span> x;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">        <span class="keyword">if</span>(f[x][i] != f[y][i])</div><div class="line">            x=f[x][i],y=f[y][i];</div><div class="line">    <span class="keyword">return</span> f[x][<span class="number">0</span>];</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">findmax</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> lca,<span class="keyword">int</span> val)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">18</span>;i&gt;=<span class="number">0</span>;i--)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(deep[ f[x][i] ] &gt;= deep[lca]) </div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(maxx[x][i]==val) ans=max(ans,minx[x][i]);</div><div class="line">            <span class="keyword">else</span> ans=max(ans,maxx[x][i]);</div><div class="line">            x=f[x][i];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> ans;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> ans=INF;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=Enum<span class="number">-1</span>;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">if</span>(vis[i]) <span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">int</span> x=E[i].u,y=E[i].v,z=E[i].w;</div><div class="line">        <span class="keyword">int</span> lca=LCA(x,y);</div><div class="line">        <span class="keyword">int</span> lmx=findmax(x,lca,z);</div><div class="line">        <span class="keyword">int</span> rmx=findmax(y,lca,z);</div><div class="line">        <span class="keyword">if</span>(max(lmx,rmx)!=z)</div><div class="line">        ans=min(ans,sum+z-max(lmx,rmx));</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>,ans);</div><div class="line">&#125;</div><div class="line">main()</div><div class="line">&#123;  </div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">    freopen(<span class="string">"a.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    N=read(),M=read();</div><div class="line">    <span class="built_in">memset</span>(head,<span class="number">-1</span>,<span class="keyword">sizeof</span>(head));</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) fa[i]=i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> x=read(),y=read(),z=read();</div><div class="line">        Add(x,y,z);</div><div class="line">    &#125;</div><div class="line">    Kruskal();</div><div class="line">    deep[<span class="number">1</span>]=<span class="number">1</span>;</div><div class="line">    dfs(<span class="number">1</span>,<span class="number">0</span>);</div><div class="line">    pre();</div><div class="line">    work();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> oi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oi </tag>
            
            <tag> 最小生成树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MatrixTree速成</title>
      <link href="/2018/02/21/MatrixTree%E9%80%9F%E6%88%90/"/>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>MatrixTree定理是用来解决生成树计数问题的有利工具</excerpt></p><p>比如说<a href="https://www.luogu.org/problemnew/show/SP104" target="_blank" rel="external">这道题</a></p><p>MatrixTree定理的算法流程也非常简单</p><p>我们记矩阵$A$为无向图的度数矩阵<br>    记矩阵$D$为无向图的邻接矩阵</p><a id="more"></a><p><the rest="" of="" contents="" |="" 余下全文=""></the></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MatrixTree定理是用来解决生成树计数问题的有利工具</p><p>比如说<a href="https://www.luogu.org/problemnew/show/SP104" target="_blank" rel="external">这道题</a></p><p>MatrixTree定理的算法流程也非常简单</p><p>我们记矩阵$A$为无向图的度数矩阵<br>    记矩阵$D$为无向图的邻接矩阵</p><p>$A$矩阵是除了对角线之外各个点值都为$0$的矩阵，$A[i][i]$表示$i$号点的度数</p><p>$D$矩阵记录两点之间的度数，$D[i][j]$表示$i$号点与$j$号点之间的边数</p><h2 id="MatrixTree定理"><a href="#MatrixTree定理" class="headerlink" title="MatrixTree定理"></a>MatrixTree定理</h2><p>我们记矩阵$G=A-D$<br>那么$G$的所有不同生成树的个数等于$G$的任何一个 $n-1$ 阶主子式的行列式的绝对值</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>MatrixTree定理的实现非常简单</p><ol><li>计算出$D$矩阵</li><li>后对其进行高斯消元</li><li>把消元后的矩阵的对角线乘起来</li><li>输出</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>就是上面那道题目的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">3001</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps=<span class="number">1e-12</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> c=getchar();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=getchar();&#125;</div><div class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=getchar();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">double</span> G[MAXN][MAXN],a[MAXN][MAXN];</div><div class="line"><span class="keyword">char</span> s[MAXN][MAXN];</div><div class="line"><span class="keyword">int</span> xx[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">-1</span>,+<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</div><div class="line"><span class="keyword">int</span> yy[<span class="number">5</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,+<span class="number">1</span>&#125;;</div><div class="line"><span class="keyword">int</span> N,M;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">int</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span>(x&lt;=eps||x&gt;=-eps) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Gauss</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    N--;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)<span class="comment">//每一行 </span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> mx=i;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=N;j++)<span class="comment">//下面的每一行 </span></div><div class="line">            <span class="keyword">if</span>(dcmp(G[mx][i]-G[j][i])&lt;<span class="number">0</span>) mx=j;</div><div class="line">        <span class="keyword">if</span>(mx!=i) swap(G[i],G[mx]);</div><div class="line">        <span class="keyword">if</span>(!G[i][i]) &#123;<span class="built_in">printf</span>(<span class="string">"0\n"</span>);<span class="keyword">return</span> ;&#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=N;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">double</span> t=G[j][i]/G[i][i];</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;=N+<span class="number">1</span>;k++)</div><div class="line">                G[j][k]-=t*G[i][k];</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">double</span> ans=<span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) ans=ans*G[i][i];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%.0f\n"</span>,<span class="built_in">abs</span>(ans));</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">int</span> T=read();</div><div class="line">    <span class="keyword">while</span>(T--)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(G,<span class="number">0</span>,<span class="keyword">sizeof</span>(G));</div><div class="line">        N=read(),M=read();</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=M;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> x=read(),y=read();</div><div class="line">            G[x][x]++;G[y][y]++;</div><div class="line">            G[x][y]--;G[y][x]--;</div><div class="line">        &#125;</div><div class="line">        Gauss();  </div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> oi </tag>
            
            <tag> 线性代数 </tag>
            
            <tag> MatrixTree定理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>四边形不等式优化DP</title>
      <link href="/2018/02/20/%E5%9B%9B%E8%BE%B9%E5%BD%A2%E4%B8%8D%E7%AD%89%E5%BC%8F%E4%BC%98%E5%8C%96DP/"/>
      <content type="html"><![CDATA[<p><excerpt in="" index="" |="" 首页摘要=""><br>记录一下，以免忘了<br>对于一个形如<br>$$dp[i][j]=min(dp[i][k]+dp[k][j]+w[i][j])$$<br>的转移方程（注意取最大值时不一定满足四边形不等式）<br><a id="more"></a></excerpt></p><p><the rest="" of="" contents="" |="" 余下全文=""><br>记录一下，以免忘了</the></p><h1 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h1><p>对于一个形如<br>$$dp[i][j]=min(dp[i][k]+dp[k][j]+w[i][j])$$<br>的转移方程（注意取最大值时不一定满足四边形不等式）</p><h2 id="定理1"><a href="#定理1" class="headerlink" title="定理1"></a>定理1</h2><p>若对于$a \leq b\leq c \leq d$且$w_{b,c}\leq w_{a,d}$<br>那么我们称$w$关于区间包含关系单调<br><img src="http://ou46et6i2.bkt.clouddn.com/1101696-20180220195000323-1743945977.png" alt=""></p><h2 id="定理2"><a href="#定理2" class="headerlink" title="定理2"></a>定理2</h2><p>若对于$a \leq b\leq c \leq d$且$w_{a,c}+w_{b,d}\leq w_{b,c}+w_{a,d}$<br>则称$w$满足四边形不等式<br><img src="http://ou46et6i2.bkt.clouddn.com/1101696-20180220195923187-15020794.png" alt=""></p><h2 id="性质1"><a href="#性质1" class="headerlink" title="性质1"></a>性质1</h2><p>若$w$满足四边形不等式，当且仅当$w_{i,j}+w_{i+1,j+1}\leq w_{i+1,j}+w_{i,j+1}$<br>（没啥卵用）</p><h2 id="性质2"><a href="#性质2" class="headerlink" title="性质2"></a>性质2</h2><p>若$w$满足四边形不等式，且关于区间包含关系单调<br>则$dp$也满足四边形不等式</p><h2 id="性质3"><a href="#性质3" class="headerlink" title="性质3"></a>性质3</h2><p>设$s_{i,j}$为$dp_{i,j}$的决策点，若$dp$满足四边形不等式<br>那么$s_{i,j-1}\leq s_{i,j} \leq s_{i+1,j}$</p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p>放一个不错的<a href="http://blog.csdn.net/noiau/article/details/72514812" target="_blank" rel="external">博客</a></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><a href="http://www.cnblogs.com/zwfymqz/p/8455716.html" target="_blank" rel="external">石子归并加强版</a><br>其实这题并不是极限数据，再强一点的可以去百度SDOI2008石子归并，据说要用平衡树维护某G姓算法<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>,INF=<span class="number">1e8</span>+<span class="number">10</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">nc</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">char</span> buf[MAXN],*p1=buf,*p2=buf;</div><div class="line">    <span class="keyword">return</span> p1==p2&amp;&amp;(p2=(p1=buf)+fread(buf,<span class="number">1</span>,MAXN,<span class="built_in">stdin</span>)),p1==p2?EOF:*p1++;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">char</span> c=nc();<span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;</div><div class="line">    <span class="keyword">while</span>(c&lt;<span class="string">'0'</span>||c&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(c==<span class="string">'-'</span>)f=<span class="number">-1</span>;c=nc();&#125;</div><div class="line">    <span class="keyword">while</span>(c&gt;=<span class="string">'0'</span>&amp;&amp;c&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+c-<span class="string">'0'</span>;c=nc();&#125;</div><div class="line">    <span class="keyword">return</span> x*f;</div><div class="line">&#125;</div><div class="line"><span class="keyword">int</span> dp[<span class="number">3001</span>][<span class="number">3001</span>],sum[MAXN],s[<span class="number">3001</span>][<span class="number">3001</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></div><div class="line">    freopen(<span class="string">"a.in"</span>,<span class="string">"r"</span>,<span class="built_in">stdin</span>);</div><div class="line">    <span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">    <span class="keyword">int</span> N=read();</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++) sum[i]=read(),sum[i]+=sum[i<span class="number">-1</span>],s[i][i]=i;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=N;i&gt;=<span class="number">1</span>;i--) </div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=N;j++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> mn=INF,mnpos=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=s[i][j<span class="number">-1</span>];k&lt;=s[i+<span class="number">1</span>][j];k++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span>(dp[i][k]+dp[k+<span class="number">1</span>][j]+sum[j]-sum[i<span class="number">-1</span>] &lt; mn)</div><div class="line">                &#123;</div><div class="line">                    mn=dp[i][k]+dp[k+<span class="number">1</span>][j]+sum[j]-sum[i<span class="number">-1</span>];</div><div class="line">                    mnpos=k;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            dp[i][j]=mn;</div><div class="line">            s[i][j]=mnpos;</div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d"</span>,dp[<span class="number">1</span>][N]);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
        <tags>
            
            <tag> DP优化 </tag>
            
            <tag> 四边形不等式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>debug</title>
      <link href="/2018/02/20/debug/"/>
      <content type="html"><![CDATA[<excerpt in="" index="" |="" 首页摘要=""> <p>测试文章</p><p>+<a id="more"></a></p><the rest="" of="" contents="" |="" 余下全文=""><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div><div class="line">#### 四级标题</div></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; 每段开头加&gt;可以引用</div><div class="line">&gt;&gt; 加两个就是嵌套引用</div><div class="line">&gt;&gt;&gt; 我真的还想再套八百年</div></pre></td></tr></table></figure><blockquote><p>每段开头加&gt;可以引用</p><blockquote><p>加两个就是嵌套引用</p><blockquote><p>我真的还想再套八百年</p></blockquote></blockquote></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">*我想变弯*</div><div class="line">**我想变胖**</div><div class="line">集齐三颗星就能召唤分割线，三个-也可以</div><div class="line">***</div></pre></td></tr></table></figure><p><strong>我想变胖</strong><br>集齐三颗星就能召唤分割线，三个-也可以</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">要输入特殊符号就在前面加\</div><div class="line">我不想\*变弯\*，只想露点\***</div></pre></td></tr></table></figure><p>要输入特殊符号就在前面加\<br>我不想*变弯*，只想露点***</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">每行开头空四格就能把文字变红并框起来，就像这样</div><div class="line">或者用大键盘数字<span class="number">1</span>左边的那个`符号引住也可以</div></pre></td></tr></table></figure><p>每行开头空四格就能把文字变红并框起来，就像这样<br>或者用大键盘数字1左边的那个`符号引住也可以</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">`妈妈`再也不用担心我输入不了`代码`啦</div></pre></td></tr></table></figure><p><code>妈妈</code>再也不用担心我输入不了<code>代码</code>啦</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">无序列表功能：人生三大错觉</div><div class="line">- 手机响了</div><div class="line">- 有人敲门</div><div class="line">- Ta喜欢我</div></pre></td></tr></table></figure><p>无序列表功能：人生三大错觉</p><ul><li>手机响了</li><li>有人敲门</li><li>Ta喜欢我</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">有序列表功能：人生新三大错觉</div><div class="line"><span class="number">1.</span> 忙完这几天就能轻松了</div><div class="line"><span class="number">2.</span> 假期可以干很多有意义的事</div><div class="line"><span class="number">3.</span> 看完这个我就去睡觉</div></pre></td></tr></table></figure><p>有序列表功能：人生新三大错觉</p><ol><li>忙完这几天就能轻松了</li><li>假期可以干很多有意义的事</li><li>看完这个我就去睡觉</li></ol></the></excerpt>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/01/01/hello-world/"/>
      <content type="html"><![CDATA[<p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop.png" alt=""></p><blockquote><p><strong>本版本仅适用于Win环境</strong><br>本文关键字： <strong>Hexo绿色版</strong>，<strong>Hexo便携版</strong>，<strong>Hexo配置</strong>，<strong>Hexo</strong>，<strong>U盘</strong></p></blockquote><p><a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>是一个快速、简洁且高效的博客框架，支持 GitHub Flavored Markdown 的所有功能；具有超快生成速度，让上百个页面在几秒内瞬间完成渲染；还拥有各式各样的插件等等。</p><p>但是就像很多教程里面写的那样，搭建 Hexo 本地环境，需要安装 Node.js、Git 以及使用 npm 进行安装和配置。这对于毫无经验的新手来说，是一个很大的挑战。同时，由于这些环境的存在，导致如果需要更换计算机的时候，重新安装配置一个新的Hexo环境，又得花费一些功夫。</p><p>所以呢，锵锵，我们整合了一个 Hexo 便携版，来简化本地环境的部署。</p><p>####<strong>版本介绍</strong><br>那么所谓的便携版到底是什么？便携版就是将 Hexo 本地环境所需要的各种依赖环境的整合到一起，做成的不需要安装的版本。</p><p>本便携版（Release 1.0.0）所包含的软件如下：</p><blockquote><ul><li>Git: 2.7.4</li><li>Nodejs: 6.10.1</li><li>Npm: 4.4.1</li><li>Hexo: 3.2.2</li></ul></blockquote><p>为了便携的需要，不能配置固定的环境变量，所以除此之外还有相应的批处理文件，下文将详细介绍。</p><p>####<strong>从零开始，1分钟搭建Hexo写作环境</strong><br>说了这么多，我们这就开始教你如何在1分钟内，从零开始搭建Hexo写作环境！</p><p>#####1 注册一个Github帐号</p><p>1.1 进入<a href="https://github.com" target="_blank" rel="external">Github</a>，并在右边的3个框框中分别填写 用户名、邮箱地址、账户密码，并点击 <strong><code>Sign up for Github</code></strong>;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop2.png" alt="图1.1.1"></p><p>1.2 进入欢迎页面后，点击<strong><code>Finish sign up</code></strong>;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop3.png" alt="图1.2.1"></p><p>1.3 进入到这一步之后（<strong>图1.3.1</strong>），先别记着点任何东西，查看你的邮箱，应该会收到如下的邮件（<strong>图1.3.2</strong>），确认你的邮件。否则，你会看到错误页面（<strong>图1.3.3</strong>）。query完毕之后在<strong>图1.3.1</strong>所示的页面，点击<strong><code>+ New repository</code></strong>;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop5.png" alt="图1.3.1"></p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop6.png" alt="图1.3.2"></p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop7.png" alt="图1.3.3"></p><p>1.4 请在红框中的 <strong><code>Repository name</code></strong> 里面输入 <strong><code>用户名.github.io</code></strong> ( <strong>用户名</strong> 就是你刚刚 <strong>步骤1.1</strong> 中注册的用户名)，然后点击 <strong><code>Create repository</code></strong>;</p><p><img src="https://portablehexo.bitmoe.cn/hexopp/hexop8.png" alt="图1.4.1"></p><p>1.5 至此，Github网页注册的部分完毕</p><p>####2 下载HEXO Portable</p><p>2.1 访问我们的 <a href="https://project.bitmoe.cn/PortableHexo/" target="_blank" rel="external">HEXO Portable</a> 页面，或者 <a href="https://github.com/Bitmoe/PortableHexo" target="_blank" rel="external">Github仓库</a> 下载最新的便携版；</p><p>2.2 双击得到的自解压文件，解压到你需要安装博客的地方，可以选择硬盘或者U盘；</p><p>####3 配置你的环境</p><p>3.1 在你的博客的文件夹，你会发现很多批处理文件，我先介绍下各个文件的用途：</p><blockquote><ul><li>配置基本信息 &gt;&gt; 配置博客的基本环境</li><li>配置Github部署 &gt;&gt; 配置博客的部署</li><li>启动命令行 &gt;&gt; 启动带环境变量的Git-Bash，否则无法使用node、npm、git等命令</li><li>新建文章 &gt;&gt; 新建一篇文章</li><li>渲染并本地测试 &gt;&gt; 生成并本地预览</li><li>渲染并部署 &gt;&gt; 生成并部署到GitHub</li><li>重置配置文件 &gt;&gt; 重置_config.yml</li></ul></blockquote><p>3.2 我们继续进行环境配置，双击<strong><code>配置基本信息</code></strong>并按顺序输入以下信息：</p><blockquote><ul><li>主标题：顾名思义</li><li>副标题：顾名思义</li><li>描述：顾名思义</li><li>作者：顾名思义</li><li>网站地址：填写 <strong>用户名.github.io</strong> （此处的用户名为<strong>步骤1.1</strong>中填写的用户名）<br><strong>如果您已经购买了域名，可以参看相关的文章！</strong></li></ul></blockquote><p>3.3 双击<strong><code>配置Github部署</code></strong>并按顺序输入以下信息：</p><blockquote><ul><li>Github的用户名：此处的用户名为<strong>步骤1.1</strong>中填写的用户名</li><li>Github注册邮箱：此处的注册邮箱为<strong>步骤1.1</strong>中填写的注册邮箱</li></ul></blockquote><p>3.4 输入完毕之后，会进行测试部署，等待屏幕提示<strong>下面将进行部署测试，稍后将有一个openssh的对话框出现，请输入你的github用户密码。</strong>的时候，按回车继续；（此处的用户密码为<strong>步骤1.1</strong>中填写的用户密码）</p><p>3.5 然后继续等待，此时屏幕会出现n多行，耐心等待即可；</p><p>3.6 等待屏幕提示<strong>请访问 <a href="https://用户名.github.io" target="_blank" rel="external">https://用户名.github.io</a> 查看是否部署成功！</strong>的时候，在浏览器中输入<strong><a href="https://用户名.github.io" target="_blank" rel="external">https://用户名.github.io</a> </strong>，理论上可以看到你的Hexo站点！（此处的用户名为<strong>步骤1.1</strong>中填写的用户名）</p><p>3.7 至此，你的Hexo环境就配置完成了，这样你的这个Hexo博客文件夹无论移动到哪一台电脑，都能通过<strong>启动命令行</strong>出现的bash命令行，或者其余便捷的批处理文件比如<strong>新建文章</strong>、<strong>渲染并本地测试</strong>、<strong>渲染并部署</strong>进行相应的操作。</p><p>3.8 如果你在配置中出错，可以运行<strong>重置配置文件</strong>后，再重复<strong>3.1~3.6步骤</strong></p><p>####4 开始享受纯粹的Hexo写作吧！</p><p>####5 备注</p><blockquote><ul><li>本便携版以及本文均使用 <a href="https://creativecommons.org/licenses/by/4.0/" target="_blank" rel="external">CC BY-NC-SA 4.0</a>协议；</li><li>本文所有权归 <a href="http://qistchan.com" target="_blank" rel="external">QistChan</a> &amp; <a href="https://wwww.bitmoe.com" target="_blank" rel="external">Bitmoe Inc.</a> 所有；</li><li>本便携版由 <a href="https://www.bitmoe.com" target="_blank" rel="external">Bitmoe Inc.</a> 维护并提供技术支持；</li><li>需要技术支持可以在<a href="https://github.com/Bitmoe/PortableHexo" target="_blank" rel="external">Github仓库</a> 提交<strong><code>Issues</code></strong>；</li><li>Written with <a href="https://stackedit.io/" target="_blank" rel="external">StackEdit</a>.</li></ul></blockquote>]]></content>
      
      
    </entry>
    
  
  
</search>
